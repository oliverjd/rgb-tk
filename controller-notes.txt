notes about how the controller works (so I can build a mock controller)
- 8 brightness levels for up/down buttons that only works in preset colors, NOT diy OR any of the moving modes
- brightness for preset colors persists across everything else
- when in diy colors, only rgb up/down work
- speed up/down works in auto, flash, jump and fade and persists across all modes as a separate state
- play/pause works in any of the moving modes ONLY (does nothing in steady modes) and freezes on current color. does not persist if mode is changed or powered off
- no other buttons do anything if power is off

generic remote functions (which should more or less correspond directly to buttons on my 44 key remote) should be:

- power toggle
- brightness up
- brightness down
- play/pause toggle
- slow down
- speed up
- switch to flash mode
- switch to fade3 mode
- switch to fade7 mode
- switch to jump3 mode
- switch to jump7 mode
- switch to auto mode
- switch to {any of the color presets}
- switch to {diy color 1 through 6}
- diy r up
- diy r down
- diy g up
- diy g down
- diy b up
- diy b down

a level below this in Remote44 should basically have every single button on the remote, all 44 of them. then generic remote should do something to reduce this number

separate persistent states of the the controller:

power: on/off
speed (affects moving modes only)
brightness (affects preset only)
mode:
 - preset mode
   - color
 - diy mode
   - r
   - g
   - b
 - auto
   - paused
 - flash
   - paused
 - fade3
   - paused
 - fade7
   - paused
 - jump3
   - paused
 - jump7
   - paused
remembered the 6 diy settings:
 - diy1 r,g,b ... etc.

brightness (on
color
mode: steady/flash/fade3/fade7/jump3/jump7 (which persists through power on/off)



classes: Remote44 extends GenericRemote to actually include the buttons - always call genericremote as an *Interface* instead of the specific type of remote, to allow changing remote later. look up how to use interfaces in c++

todo: implement a mock of this controller/remote so i can do everything in software!


Functions to implement:

- power on/off - DONE
- switch between preset colours - DONE
- change brightnes on preset colours only - DONE
- switch between DIY settings - DONE
- modify DIY settings - DONE
- fade3/7 mode
- jump3/7 mode
- auto mode
- speed up/down
- play/pause

brightness: only if currentMode is mode_preset

flow of objects:

KeyboardListener.keyPressed -> GenericController.newFunction
-> remote44->sendButtonPress(buttonCode) -> virtualController->receiveRemoteCommand
-> calculateCurrentColour -> done


TODO:

1. move emulator stuff to its own folder - DONE
2. move the junk from rgb44.h into controller44keystate and rename it to controller44key - DONE
3. thread out the 'gui' (emulator) - DONE
4. write some tests

then:
- implement moving stuff
- start thinking about automation routines
- think about moving config to a yaml file



why does virtualcontroller need a pointer to genericcontroller? it really shouldn't

also consider making virtualcontroller do its own thread internally so that's all taken care of and hidden, so:

- call virtualcontroller->receiveCommand() or whatever and that causes virtualpointer to add an entry to its own internal queue, which its internal thread reads and sorts out separately, so you can guarantee that receiveCommand() is non-blocking



the reason virtualController needs a pointer to genericController is because it owns the keybaordListener object and so must send its own command to the genericController..

if keyboardListener and


issue:
- virtualController needs to call genericController by itself only
- genericController needs to be able to call virtualController both by itself and in response to virtualController i.e. any time
- both are owned by main


i'd say most important thing is for genericController to know about virtualController i.e. make virtualcontroller first
then make genericcontroller using virtualcontroller
then give virtualcontroller the reference to genericcontroller

why not have virtualController call genericController and pass a reference to be


virtalcontroller has addCommandToQueue which runs in its main thread, then it spins off its own thread which monitors the queue
virtualController definitely needs a thread for the keyboardListener's get character loop


simple things todo now:

- anywhere there is printw() replace it with a virtualController->print() which is threadsafe, so you can turn logs on/off etc. in future
- likewise, put proper threadsafe queue support in any inter-thread functions (work out what they are first)
- flesh out and refactor the ifttt
- write proper build instructions etc.
- replace sendButtonPress with something non-blocking in lirc?
